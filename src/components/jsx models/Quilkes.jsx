/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useThree } from "@react-three/fiber";
import { gsap } from "gsap";

export function Abdulmatin(props) {
  const { page } = props;
  const { nodes, materials } = useGLTF("/quilkes.glb");
  const { viewport, camera } = useThree();
  const groupRef = useRef();

  useEffect(() => {
    if (groupRef.current) {
      gsap.to(groupRef.current.rotation, {
        y: Math.PI / 2 + 0.3,
        duration: 1.5,
        onUpdate: () => {
          camera.lookAt(0, 0, 0);
        },
      });
    }
  }, [groupRef.current]);

  useEffect(() => {
    if (page === 1) {
      gsap.fromTo(
        groupRef.current.rotation,
        {
          y: Math.PI / 2 + 0.3,
        },
        {
          y: Math.PI / 2 + 2,
          duration: 1.2,
          ease: "power1.inOut",
          delay: 0.1,
          onUpdate: () => {
            camera.lookAt(0, 0, 0);
          },
        }
      );
      console.log("rotation");
    } else {
      gsap.to(groupRef.current.rotation, {
        y: Math.PI / 2 + 0.3,
        duration: 1,
        ease: "power1.inOut",
        onUpdate: () => {
          camera.lookAt(0, 0, 0);
        },
      });
      console.log("rotation");
    }
  }, [page]);

  return (
    <group {...props} dispose={null}>
      <group
        ref={groupRef}
        scale={7.4}
        position={[-2, -viewport.height * 2 - 1.8, 0]}
      >
        <mesh
          name="Abdulmatin"
          castShadow
          receiveShadow
          geometry={nodes.Abdulmatin.geometry}
          material={nodes.Abdulmatin.material}
          morphTargetDictionary={nodes.Abdulmatin.morphTargetDictionary}
          morphTargetInfluences={nodes.Abdulmatin.morphTargetInfluences}
          position={[0, 1.686, 0.087]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/quilkes.glb");
